@model CourseFormViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
@{
    ViewData["Title"] = Model.Id != Guid.Empty ? $"تعديل بيانات البرنامج التدريبي: {Model.Name}" : "إنشاء برنامج تدريبي جديد";
}
<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">@ViewData["Title"]</h3>
        </div>

        <form asp-action="Create" method="post" id="createCourseForm">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="alert alert-danger m-3"></div>

            <input type="hidden" asp-for="Id" id="hiddenCourseIdInput" />

            @if (Model.Course != null)
            {
                <div class="card shadow-sm m-3 bg-light border-primary">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>معلومات الدورة المختارة/الحالية</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h4>@Model.Course.Name <small class="text-muted">(@Model.Course.Level?.Name)</small></h4>
                                @if (!string.IsNullOrEmpty(Model.Course.Description))
                                {
                                    <p class="text-muted"><em>@Model.Course.Description</em></p>
                                }
                            </div>
                            <div class="col-md-4 text-md-end">
                                <p class="mb-1"><strong>المحور:</strong> @Model.Course.CourseClassification?.Name</p>
                                <p class="mb-0"><strong>المستوى:</strong> @Model.Course.Level?.Name</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (Model.Id == Guid.Empty && Model.CourseList != null && Model.CourseList.Any())
            {
                <div class="container mt-4 p-3 border rounded mb-3">
                    <h4 class="mb-3 text-primary"><i class="fas fa-tasks me-2"></i>اختيار دورة موجودة</h4>
                    <p class="text-muted">إذا كانت هذه الدورة تكرارًا أو تحديثًا لدورة سابقة، يمكنك اختيارها من القائمة أدناه لربط التفاصيل الجديدة بها.</p>

                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="courseCardsContainer">
                        @foreach (var courseItem in Model.CourseList)
                        {
                            <div class="col">
                                <div class="card h-100 course-card shadow-sm" style="cursor: pointer;"
                                     data-course-id="@courseItem.Id"
                                     data-course-name="@courseItem.Name"
                                     data-duration-hours="@courseItem.DurationHours"
                                     data-days="@(courseItem.Days ?? 0)">
                                    @* <-- أهم إضافة هنا: تمرير البيانات اللازمة *@

                                    <div class="card-body d-flex flex-column">
                                        <h5 class="card-title">@courseItem.Name</h5>
                                        @if (!string.IsNullOrWhiteSpace(courseItem.Code))
                                        {
                                            <h6 class="card-subtitle mb-2 text-muted">@courseItem.Code</h6>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(courseItem.Description))
                                        {
                                            <p class="card-text flex-grow-1 small">
                                                @(courseItem.Description.Length > 80 ? courseItem.Description.Substring(0, 80) + "..." : courseItem.Description)
                                            </p>
                                        }
                                        else
                                        {
                                            <div class="flex-grow-1"></div>
                                        }
                                        <div class="mt-auto">
                                            @if (courseItem.CourseClassification != null)
                                            {
                                                <span class="badge bg-secondary me-1">@courseItem.CourseClassification.Name</span>
                                            }
                                            @if (courseItem.Level != null)
                                            {
                                                <span class="badge bg-info">@courseItem.Level.Name</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-footer text-center bg-light">
                                        <small class="text-muted">اختر هذه الدورة كقاعدة</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="mt-3 p-2 bg-light-subtle border rounded" id="selectedCourseFeedback" style="display:none;">
                        <p class="mb-0"><strong>الدورة المختارة كقاعدة:</strong> <span id="selectedCourseNameDisplayFeedback"></span></p>
                    </div>
                </div>
            }
          

            <div class="card-body">
                <fieldset class="mb-4 p-3 border rounded">
                    <legend class="w-auto px-2 h5 text-success"><i class="fas fa-calendar-alt me-2"></i>تفاصيل ومواعيد تنفيذ الدورة</legend>
                    <div id="courseDetailsContainer">
                        @if (Model.CourseDetailsEntries != null)
                        {
                            for (int i = 0; i < Model.CourseDetailsEntries.Count; i++)
                            {
                                @Html.Partial("_CourseDetailFormEntry", Model.CourseDetailsEntries[i],
                                new ViewDataDictionary(ViewData) {
                                                { "index", i },
                                                { "Statuses", Model.Statuses },
                                                { "Locations", Model.Locations },
                                                { "CourseTypes", Model.CourseTypes }
                                                })
                                                }
                                                }
                    </div>
                    <button type="button" id="addCourseDetailButton" class="btn btn-outline-success btn-sm mt-2">
                        <i class="fas fa-plus"></i> إضافة موعد تنفيذ آخر
                    </button>
                    <span asp-validation-for="CourseDetailsEntries" class="text-danger d-block mt-2"></span>
                </fieldset>

                <hr />
                <div class="d-flex justify-content-end p-3">
                    <a asp-action="Index" asp-controller="Courses" class="btn btn-outline-secondary me-2">
                        <i class="fas fa-times me-1"></i> إلغاء
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i> @(Model.Id != Guid.Empty ? "حفظ التعديلات" : "إنشاء الدورة")
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {

            // ===================================================================
            // ======== START: وظيفة مساعدة لحساب تاريخ الانتهاء ========
            // ===================================================================
            function calculateAndSetEndDate(detailEntryElement) {
                const startDateInput = detailEntryElement.find('input[id$="__StartDate"]');
                const endDateInput = detailEntryElement.find('input[id$="__EndDate"]');
                const days = detailEntryElement.data('base-course-days'); // نقرأ الأيام من بيانات العنصر

                const startDateValue = startDateInput.val();

                // نتأكد من وجود كل البيانات اللازمة
                if (startDateValue && days && parseInt(days) > 0) {
                    try {
                        let startDate = new Date(startDateValue);
                        if (isNaN(startDate.getTime())) return;

                        // إضافة الأيام (مع طرح يوم واحد لأن اليوم الأول يُحسب)
                        startDate.setDate(startDate.getDate() + (parseInt(days) - 1));

                        // تنسيق التاريخ إلى YYYY-MM-DD لوضعه في حقل الإدخال
                        const year = startDate.getFullYear();
                        const month = ('0' + (startDate.getMonth() + 1)).slice(-2);
                        const day = ('0' + startDate.getDate()).slice(-2);
                        const newEndDate = `${year}-${month}-${day}`;

                        endDateInput.val(newEndDate);
                    } catch (e) {
                        console.error("Error calculating end date:", e);
                        endDateInput.val('');
                    }
                }
            }

            // --- START: Dynamic CourseDetail Entries ---
            function updateRemoveButtonsVisibility() {
                const entries = $("#courseDetailsContainer .course-detail-entry");
                entries.find(".remove-course-detail").toggleClass("d-none", entries.length <= 1);
            }

            $("#addCourseDetailButton").click(function () {
                const currentIndex = $("#courseDetailsContainer .course-detail-entry").length;
                $.ajax({
                    url: '@Url.Action("GetCourseDetailEntryPartial", "CourseDetails")', // تأكد من اسم الكنترولر الصحيح
                    type: 'GET',
                    data: { index: currentIndex },
                    success: function (result) {
                        $("#courseDetailsContainer").append(result);
                        const form = $("#createCourseForm");
                        form.removeData("validator").removeData("unobtrusiveValidation");
                        $.validator.unobtrusive.parse(form);
                        updateRemoveButtonsVisibility();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error adding course detail entry:", status, error);
                        alert("حدث خطأ أثناء إضافة تفصيل الدورة. راجع الكونسول.");
                    }
                });
            });

            $("#courseDetailsContainer").on("click", ".remove-course-detail", function (e) {
                e.preventDefault();
                if ($("#courseDetailsContainer .course-detail-entry").length > 1) {
                     $(this).closest(".course-detail-entry").remove();
                     updateRemoveButtonsVisibility();
                } else {
                     alert("يجب أن يكون هناك تفصيل واحد على الأقل للدورة.");
                }
            });

            if ('@(Model.Id == Guid.Empty && (Model.CourseDetailsEntries == null || !Model.CourseDetailsEntries.Any()))' === 'True') {
                 $("#addCourseDetailButton").trigger('click');
            } else {
                 updateRemoveButtonsVisibility();
            }
            // --- END: Dynamic CourseDetail Entries ---

            // ===================================================================
            // ======== START: تعديل منطق اختيار كرت الدورة (الأهم) ========
            // ===================================================================
            $('#courseCardsContainer').on('click', '.course-card', function () {
                const $card = $(this);
                const courseId = $card.data('course-id');
                const courseName = $card.data('course-name');
                const durationHours = $card.data('duration-hours');
                const courseDays = $card.data('days');

                // تحديث الحقل المخفي الرئيسي للدورة
                $('#hiddenCourseIdInput').val(courseId).trigger('change');
                $('#selectedCourseNameDisplayFeedback').text(courseName);
                $('#selectedCourseFeedback').slideDown();
                $('#courseCardsContainer .course-card').removeClass('border-primary shadow-lg').addClass('shadow-sm');
                $card.addClass('border-primary shadow-lg');

                // تعبئة بيانات النموذج الجزئي الأول
                const firstDetailEntry = $('#courseDetailsContainer .course-detail-entry:first');
                if (firstDetailEntry.length > 0) {
                    firstDetailEntry.find('input[id$="__Name"]').val(courseName).trigger('input');
                    firstDetailEntry.find('input[id$="__DurationHours"]').val(durationHours).trigger('input');

                    // تخزين عدد الأيام في بيانات العنصر نفسه لاستخدامه لاحقاً
                    firstDetailEntry.data('base-course-days', courseDays);

                    // استدعاء الوظيفة لحساب تاريخ النهاية فوراً
                    calculateAndSetEndDate(firstDetailEntry);
                }
            });
            // --- END: Course Card Selection ---


            // ===================================================================
            // ======== START: مراقبة تغيير تاريخ البدء لحساب النهاية تلقائياً ========
            // ===================================================================

              $('#courseDetailsContainer').on('change', 'select[id$="__LocationId"]', function() {
                const $select = $(this);
                const selectedOption = $select.find('option:selected');
                const fullCount = selectedOption.data('full-count');
                const targetInput = $select.closest('.course-detail-entry').find('input[id$="__Numberoftargets"]');

                if (fullCount !== undefined && fullCount !== '') {
                    targetInput.val(fullCount);
                } else {
                    targetInput.val('');
                }
            });


            $('#courseDetailsContainer').on('change', 'input[id$="__StartDate"]', function() {
                const detailEntry = $(this).closest('.course-detail-entry');
                // نستدعي وظيفة الحساب لهذا العنصر المحدد
                calculateAndSetEndDate(detailEntry);
            });
        });
    </script>
}