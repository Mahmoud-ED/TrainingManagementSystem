@model Dictionary<Locations, List<PlanCours>>
@using System.Globalization

@{
    var selectedYear = (int)ViewData["SelectedYear"];
    var yearStartDate = new DateTime(selectedYear, 1, 1);
    var totalDaysInYear = 365 + (DateTime.IsLeapYear(selectedYear) ? 1 : 0);
    string GetColor(Guid? id)
    {
        if (!id.HasValue) return "#6c757d";
        var hash = Math.Abs(id.Value.GetHashCode());
        string[] palette = { "#0d6efd", "#6610f2", "#6f42c1", "#d63384", "#dc3545", "#fd7e14", "#ffc107", "#198754", "#20c997", "#0dcaf0" };
        return palette[hash % palette.Length];
    }
}

<style>
    .location-gantt-wrapper {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .location-swimlane {
        display: flex;
        border: 1px solid #dee2e6;
        border-radius: .375rem;
        overflow: hidden;
    }

    .location-label {
        flex: 0 0 180px;
        padding: 1rem;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        font-weight: bold;
        border-left: 5px solid;
    }

    .location-chart {
        flex-grow: 1;
        position: relative;
        background-image: repeating-linear-gradient(to right, #f1f1f1, #f1f1f1 1px, transparent 1px, transparent 8.33%);
    }

    .gantt-header-sticky {
        position: sticky;
        top: 0;
        z-index: 20;
        background: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .gantt-row-container {
        position: relative;
        width: 100%;
    }

    .gantt-bar-loc {
        position: absolute;
        height: 30px;
        line-height: 30px;
        border-radius: 4px;
        color: white;
        padding: 0 10px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        font-size: 0.8rem;
    }

        .gantt-bar-loc:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 8px rgba(0,0,0,0.2);
            z-index: 10;
        }
</style>

@if (Model.Any())
{
    <div class="gantt-header-sticky d-flex">
        <div style="flex: 0 0 180px; background-color: #e9ecef;"></div>
        @for (int i = 1; i <= 12; i++)
        {
            <div class="gantt-month" style="border-left: 1px solid #dee2e6; flex-basis: @((DateTime.DaysInMonth(selectedYear, i) / (double)totalDaysInYear) * 100)%;">
                @(new DateTime(selectedYear, i, 1).ToString("MMMM", new CultureInfo("ar-EG")))
            </div>
        }
    </div>
    <div class="location-gantt-wrapper mt-3">
        @foreach (var group in Model.OrderBy(g => g.Key.Name))
        {
            var lanes = new List<DateTime?>();
            foreach (var plan in group.Value)
            {
                int laneIndex = lanes.FindIndex(laneEndDate => laneEndDate <= plan.StartDate);
                if (laneIndex == -1) { lanes.Add(plan.EndDate); }
                else { lanes[laneIndex] = plan.EndDate; }
            }
            var requiredHeight = Math.Max(1, lanes.Count) * 45;

            <div class="location-swimlane">
                <div class="location-label" style="border-color: @GetColor(group.Key.Id);">@group.Key.Name</div>
                <div class="location-chart">
                    <div class="gantt-row-container" style="height: @(requiredHeight)px;">
                        @{
                            var laneAssignments = new Dictionary<Guid, int>();
                            lanes.Clear();
                            foreach (var plan in group.Value)
                            {
                                int laneIndex = lanes.FindIndex(laneEndDate => laneEndDate <= plan.StartDate);
                                if (laneIndex == -1) { laneIndex = lanes.Count; lanes.Add(plan.EndDate); }
                                else { lanes[laneIndex] = plan.EndDate; }
                                laneAssignments[plan.Id] = laneIndex;
                            }
                        }

                        @foreach (var plan in group.Value)
                        {
                            var startOffset = (plan.StartDate - yearStartDate).TotalDays;
                            var duration = Math.Max(1, ((plan.EndDate ?? plan.StartDate) - plan.StartDate).TotalDays + 1);
                            var left = (startOffset / totalDaysInYear) * 100;
                            var width = (duration / totalDaysInYear) * 100;
                            var topPosition = laneAssignments[plan.Id] * 45 + 5;

                            <a href="@Url.Action("Details", new { id = plan.Id })" class="gantt-bar-loc"
                               style="left: @left.ToString("F2", CultureInfo.InvariantCulture)%; width: @width.ToString("F2", CultureInfo.InvariantCulture)%; top: @(topPosition)px; background-color: @GetColor(plan.CourseId);"
                               data-bs-toggle="tooltip" data-bs-placement="top"
                               title="@plan.Course.Name - من @plan.StartDate.ToShortDateString() إلى @((plan.EndDate ?? plan.StartDate).ToShortDateString())">
                                <strong>@plan.Course.Name</strong>
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info text-center">لا توجد خطط مرتبطة بمواقع في هذه السنة.</div>
}